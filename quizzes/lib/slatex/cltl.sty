%cltl.sty
%SLaTeX Version 1.99
%Style file to be used in (La)TeX when using SLaTeX for Common Lisp
%(c) Dorai Sitaram, December 1991, Rice University

\input slatex.sty

% The database in this file was generated from CL as follows:

% (defun canonical-special-form-p (x)
%   (and (special-form-p x) (not (macro-function x))))

% (defun gather (pred)
%   (sort (let ((x '()))
%           (do-all-symbols (y)
%             (if (funcall pred y) (setq x (cons y x))))
%           x)
%         #'string< :key #'symbol-name))

% A rather old (1987) version of Ibuki CL was used.  So you may want
% to regenerate the keywords using the above functions in _your_ CL.

% CL sp. forms, i.e., (gather #'canonical-special-form-p)
 
\setkeyword{block catch compiler-let declare eval-when flet function
go if labels let let* macrolet multiple-value-call
multiple-value-prog1 progn progv quote return-from setq tagbody the
throw unwind-protect}

% CL macros, i.e., (gather #'macro-function)

\setkeyword{and assert compiler::base-used case ccase check-type
compiler::ck-spec compiler::ck-vl clines compiler::cmpck
system::coerce-to-package conditions::conc-name cond ctypecase decf
debugger::def-command defcfun defconstant defentry
system:define-compiler-macro conditions:define-condition
system:define-inline-function define-modify-macro define-setf-method
define-user-stream-type defla defmacro defparameter defsetf defstruct
deftype defun debugger::defun-property defvar do do* do-all-symbols
do-external-symbols do-symbols system::docdoc system::docfun
system::doctype system::docvar dolist compiler::dolist*
compiler::dolist** dotimes compiler::dotimes* compiler::dotimes**
ecase etypecase compiler::get-output-pathname conditions:handler-bind
conditions:handler-case system::if-error conditions:ignore-errors incf
system::inspect-print system::inspect-recursively locally loop
conditions::make-function multiple-value-bind multiple-value-list
multiple-value-setq compiler::next-cfun compiler::next-cmacro
compiler::next-cvar compiler::next-label compiler::next-label* or
conditions::parent-type pop prog prog* prog1 prog2 psetf psetq push
pushnew remf conditions::report-function conditions::resolve-function
conditions:restart-bind conditions:restart-case return rotatef
compiler::safe-compile setf shiftf conditions::slots step time trace
typecase unless untrace when debugger::with-debugger-environment
with-input-from-string conditions::with-keyword-pairs with-open-file
with-open-stream with-output-to-string conditions:with-simple-restart
compiler::wt compiler::wt-go compiler::wt-h compiler::wt-label
compiler::wt-nl compiler::wt-nl1}

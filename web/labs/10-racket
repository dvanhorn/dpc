Overriding: Extending existing behavior
  Extend existing behavior
  Dispatch
    e.g. calling a method overridded by B from within a method in A

Something that expects an object with many behaviors
Define base class with many default behaviors
Extend base class in various ways without redefining all the behaviors

  bounce, collide
    Bigger "power" causes collision, equal "power" causes bounce
    Collision detection handled by world (bsp trees?)

  eat, click
    Bigger power eats, equal power randomly decides
    eating aggregates size
    clicking fragments into smaller agents
    e.g. Osmos

  Some other kind of interacting agents...

  Extend behavior of ships and rocks?
    e.g. repel, key/mouse control
  Extend behavior of worlds?
    e.g. key-down
  Extend behavior of worlds with universe?

Useful pattern: update method per field

  (define-class point%
    (fields x y)
    (define/public (update-x x)
      (point% x (field y)))
    (define/public (update-y y)
      (point% (field x) y))
    (define/public (mv dx dy)
      (this . update-x (+ dx (field x))
            . update-y (+ dy (field y)))))

  (define-class color-point%
    (fields color)
    (define/public (update-x x)
      (color-point% x (field y) (field color)))
    (define/public (update-y y)
      (color-point% (field x) y (field color)))
    (define/public (update-color color)
      (color-point% (field x) (field y) color)))
